#!/bin/bash
# /usr/bin/onirobuilder
# Wrapper script for OniroBuilder commands:
#   init  - Install the OpenHarmony SDK and command-line tools.
#   sign  - Generate signing keys and configs.
#   build - Build an OpenHarmony application.
#
# NOTE: All supporting scripts and files are in /opt/onirobuilder.
# Run 'onirobuilder init' first in a given shell before calling build or sign.

set -e

# Base directory where all files reside.
BASE_DIR="/opt/onirobuilder"
export CMD_PATH="$HOME/command-line-tools"
export OHOS_BASE_SDK_HOME="$HOME/setup-ohos-sdk/linux"
EMULATOR_DIR="$CMD_PATH/emulator"
EMULATOR_BIN="$CMD_PATH/bin/oniro-emulator"

# Usage function.
usage() {
    echo "Usage: onirobuilder <command> [options]"
    echo
    echo "Commands:"
    echo "  init [--sdk-version <version>] [--no-env]   Install the OpenHarmony SDK, command-line tools, and Oniro emulator."
    echo "                                 Use --sdk-version to specify the SDK version (default: 5.0.0)."
    echo "                                 Use --no-env to skip modifying your shell profile."
    echo "  build [project_directory]        Build an OpenHarmony application in the specified directory (default: current directory)."
    echo "  sign [project_directory]         Generate signing keys and configs for the specified project (default: current directory)."
    echo "  emulator [args...]               Start the Oniro emulator. Extra arguments are passed to the emulator."
    echo "  --help, -h                       Show this help message."
    exit 1
}

# --------------------------------------------------
# Initialize environment: install the SDK and tools.
# --------------------------------------------------

install_emulator() {
    EMULATOR_URL="https://github.com/eclipse-oniro4openharmony/device_board_oniro/releases/download/v1.0.0/oniro_emulator.zip"
    mkdir -p "$EMULATOR_DIR"
    mkdir -p "$CMD_PATH/bin"
    TMP_ZIP="/tmp/oniro_emulator.zip"
    curl -L "$EMULATOR_URL" -o "$TMP_ZIP"
    unzip -o "$TMP_ZIP" -d "$EMULATOR_DIR"
    chmod +x "$EMULATOR_DIR/images/run.sh"
    # Create launcher binary
    cat <<EOF > "$EMULATOR_BIN"
#!/bin/bash
cd "\$(dirname "\$0")/../emulator/images" || exit
exec "./run.sh" "\$@"
EOF
    chmod +x "$EMULATOR_BIN"
    echo "Oniro emulator installed. Run 'oniro-emulator' to start."
}

add_env_to_shell_profile() {
    SHELL_PROFILE="$HOME/.bashrc"
    if [ -f "$HOME/.zshrc" ]; then
        SHELL_PROFILE="$HOME/.zshrc"
    fi
    echo "Do you want to add OHOS_BASE_SDK_HOME, CMD_PATH/bin, and CMD_PATH/sdk/default/openharmony/toolchains to your shell profile ($SHELL_PROFILE)? [y/N]: "
    read -r env_ans
    if [[ "$env_ans" =~ ^[Yy]$ ]]; then
        if ! grep -q 'export OHOS_BASE_SDK_HOME=' "$SHELL_PROFILE"; then
            echo "export OHOS_BASE_SDK_HOME=\"$OHOS_BASE_SDK_HOME\"" >> "$SHELL_PROFILE"
        fi
        if ! grep -q 'export CMD_PATH=' "$SHELL_PROFILE"; then
            echo "export CMD_PATH=\"$CMD_PATH\"" >> "$SHELL_PROFILE"
        fi
        if ! grep -q 'export PATH=.*$CMD_PATH/bin' "$SHELL_PROFILE"; then
            echo 'export PATH="$CMD_PATH/bin:$PATH"' >> "$SHELL_PROFILE"
        fi
        if ! grep -q 'export PATH=.*$CMD_PATH/sdk/default/openharmony/toolchains' "$SHELL_PROFILE"; then
            echo 'export PATH="$CMD_PATH/sdk/default/openharmony/toolchains:$PATH"' >> "$SHELL_PROFILE"
        fi
        echo "Added OHOS_BASE_SDK_HOME, CMD_PATH/bin, and CMD_PATH/sdk/default/openharmony/toolchains to PATH in $SHELL_PROFILE. Please restart your shell or run: source $SHELL_PROFILE"
    else
        echo "Skipped modifying $SHELL_PROFILE. You may need to set OHOS_BASE_SDK_HOME and update PATH manually."
    fi
}

init() {
    # Parse optional --sdk-version and --no-env flags
    SDK_VERSION="5.0.0"
    SKIP_ENV=0
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --sdk-version)
                shift
                if [[ $# -gt 0 ]]; then
                    SDK_VERSION="$1"
                    shift
                else
                    echo "Error: --sdk-version requires a value."
                    exit 1
                fi
                ;;
            --no-env)
                SKIP_ENV=1
                shift
                ;;
            *)
                # Ignore unknown flags for now
                shift
                ;;
        esac
    done

    echo "=== Starting OniroBuilder Initialization ==="

    # Install OpenHarmony SDK.
    if [ -d "$OHOS_BASE_SDK_HOME" ]; then
        read -p "OpenHarmony SDK already exists at $OHOS_BASE_SDK_HOME. Proceed with installation anyway? [y/N]: " sdk_ans
        if [[ ! "$sdk_ans" =~ ^[Yy]$ ]]; then
            echo "Skipping OpenHarmony SDK installation."
        else
            echo "Installing OpenHarmony SDK version $SDK_VERSION..."
            export OHOS_SDK_VERSION="$SDK_VERSION"
            export INPUT_VERSION="$OHOS_SDK_VERSION"
            export INPUT_MIRROR="false"
            export INPUT_COMPONENTS="all"
            export INPUT_FIXUP_PATH="true"
            export INPUT_CACHE="false"
            export INPUT_WAS_CACHED="false"
            bash "$BASE_DIR/install_ohos_sdk.sh"
        fi
    else
        echo "Installing OpenHarmony SDK version $SDK_VERSION..."
        export OHOS_SDK_VERSION="$SDK_VERSION"
        export INPUT_VERSION="$OHOS_SDK_VERSION"
        export INPUT_MIRROR="false"
        export INPUT_COMPONENTS="all"
        export INPUT_FIXUP_PATH="true"
        export INPUT_CACHE="false"
        export INPUT_WAS_CACHED="false"
        bash "$BASE_DIR/install_ohos_sdk.sh"
    fi

    # Install command-line tools.
    if [ -d "$CMD_PATH" ]; then
        read -p "Command-line tools already exist at $CMD_PATH. Proceed with installation anyway? [y/N]: " cmd_ans
        if [[ ! "$cmd_ans" =~ ^[Yy]$ ]]; then
            echo "Skipping command-line tools installation."
        else
            echo "Installing command-line tools..."
            bash "$BASE_DIR/cmd_tools_installer.sh"
        fi
    else
        echo "Installing command-line tools..."
        bash "$BASE_DIR/cmd_tools_installer.sh"
    fi

    # Install npm dependencies from package.json.
    if [ -f "$BASE_DIR/package.json" ]; then
        echo "Installing npm packages..."
        cd "$BASE_DIR" && npm install
    fi

    # Setup npm registry for OpenHarmony.
    echo "@ohos:registry=https://repo.harmonyos.com/npm/" > "$HOME/.npmrc"

    # Ask user before modifying shell profile, unless --no-env was passed
    if [ "$SKIP_ENV" -eq 0 ]; then
        add_env_to_shell_profile
    else
        echo "Skipping shell profile modification (--no-env specified)."
    fi

    # Install Oniro emulator
    if [ -d "$EMULATOR_DIR" ]; then
        read -p "Oniro emulator already exists at $EMULATOR_DIR. Proceed with installation anyway? [y/N]: " emu_ans
        if [[ ! "$emu_ans" =~ ^[Yy]$ ]]; then
            echo "Skipping Oniro emulator installation."
        else
            echo "Installing Oniro emulator..."
            install_emulator
        fi
    else
        echo "Installing Oniro emulator..."
        install_emulator
    fi

    echo "=== OniroBuilder Initialization Complete ==="
}

# --------------------------------------------------
# Generate signing configurations.
# --------------------------------------------------
sign() {
    # Use the first argument as the project directory, or default to current directory.
    PROJECT_DIR="${1:-$(pwd)}"

    # Basic check for an OpenHarmony project.
    if [ ! -f "$PROJECT_DIR/build-profile.json5" ]; then
        echo "Error: This is not an OpenHarmony project. 'build-profile.json5' not found in $PROJECT_DIR."
        exit 1
    fi

    echo "=== Generating Signature Keys and Configs ==="
    node "$BASE_DIR/generate_signing_configs.js" "$PROJECT_DIR"
    echo "=== Signature Keys and Configs Generation Complete ==="
}

# --------------------------------------------------
# Build an OpenHarmony application.
# --------------------------------------------------
build() {
    # Use the first argument as the project directory, or default to current directory.
    PROJECT_DIR="${1:-$(pwd)}"
    echo "=== Building project in directory: $PROJECT_DIR ==="

    # Verify that required environment variables are present.
    if [ -z "$OHOS_BASE_SDK_HOME" ]; then
        echo "Error: OHOS_BASE_SDK_HOME is not set. Please run 'onirobuilder init' first."
        exit 1
    fi
    if [ -z "$CMD_PATH" ]; then
        echo "Error: CMD_PATH is not set. Please run 'onirobuilder init' first."
        exit 1
    fi

    # Basic check for an OpenHarmony project.
    if [ ! -f "$PROJECT_DIR/build-profile.json5" ]; then
        echo "Error: This is not an OpenHarmony project. 'build-profile.json5' not found in $PROJECT_DIR."
        exit 1
    fi
    echo "=== OpenHarmony project detected ==="

    # Install project dependencies.
    echo "=== Installing Project Dependencies ==="
    cd "$PROJECT_DIR"
    $CMD_PATH/bin/ohpm install --all

    # Execute build steps.
    cd "$PROJECT_DIR"
    # Check if hvigorw exists in the current project directory.
    if [ -f "$PROJECT_DIR/hvigorw" ]; then
        HVIGORW_CMD="$PROJECT_DIR/hvigorw"
    else
        HVIGORW_CMD="$CMD_PATH/bin/hvigorw"
    fi

    chmod +x $HVIGORW_CMD

    # Use the determined hvigorw command.
    $HVIGORW_CMD --version --accept-license
    $HVIGORW_CMD clean --no-parallel --no-daemon
    $HVIGORW_CMD assembleHap --mode module -p product=default --stacktrace --no-parallel --no-daemon

    echo "=== Build Process Complete ==="
}

# --------------------------------------------------
# Command dispatch.
# --------------------------------------------------
if [ $# -lt 1 ]; then
    usage
fi

COMMAND="$1"
shift

case "$COMMAND" in
    init)
        init "$@"
        ;;
    build)
        build "$@"
        ;;
    sign)
        sign
        ;;
    --help|-h)
        usage
        ;;
    emulator)
        "$CMD_PATH/bin/oniro-emulator" "$@"
        ;;
    *)
        echo "Unknown command: $COMMAND"
        usage
        ;;
esac
